{"version":3,"sources":["Food.js","Snake.js","App.js","index.js"],"names":["props","style","left","dot","top","className","snakeDots","map","i","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOACe,WAACA,GACZ,IAAMC,EAAQ,CACVC,KAAK,GAAD,OAAKF,EAAMG,IAAI,GAAf,KACJC,IAAI,GAAD,OAAKJ,EAAMG,IAAI,GAAf,MAGP,OAAO,qBAAKE,UAAU,aAAaJ,MAAOA,KCN/B,WAACD,GACZ,OACI,8BACKA,EAAMM,UAAUC,KAAI,SAACJ,EAAKK,GACvB,IAAMP,EAAQ,CACVC,KAAK,GAAD,OAAKC,EAAI,GAAT,KACJC,IAAI,GAAD,OAAKD,EAAI,GAAT,MAEP,OAAO,qBAAKE,UAAU,YAAoBJ,MAAOA,GAAVO,SCLjDC,EAAuB,WAKzB,MAAO,CAF2D,EAA1DC,KAAKC,OAAO,GAAAD,KAAKE,SAFf,GAEmD,GACK,EAA1DF,KAAKC,OAAO,GAAAD,KAAKE,SAHf,GAGmD,KAI3DC,EAAe,CACjBC,KAAML,IACNM,MAAO,IACPC,UAAW,QACXV,UAAW,CACP,CAAC,EAAG,GACJ,CAAC,EAAG,KAgIGW,E,4MA3HXC,MAAQL,E,EAaRM,UAAY,SAACC,GAIT,QAHAA,EAAIA,GAAKC,OAAOC,OAGNC,SACN,KAAK,GACD,EAAKC,SAAS,CAAER,UAAW,OAC3B,MACJ,KAAK,GACD,EAAKQ,SAAS,CAAER,UAAW,SAC3B,MACJ,KAAK,GACD,EAAKQ,SAAS,CAAER,UAAW,SAC3B,MACJ,KAAK,GACD,EAAKQ,SAAS,CAAER,UAAW,Y,EAKvCS,UAAY,WACR,IAAIC,EAAI,YAAO,EAAKR,MAAMZ,WACtBqB,EAAOD,EAAKA,EAAKE,OAAS,GAG9B,OAAQ,EAAKV,MAAMF,WACf,IAAK,QACDW,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACJ,IAAK,OACDA,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACJ,IAAK,OACDA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAC3B,MACJ,IAAK,KACDA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAGnCD,EAAKG,KAAKF,GACVD,EAAKI,QACL,EAAKN,SAAS,CACVlB,UAAWoB,K,uDArDnB,WACIK,YAAYC,KAAKP,UAAWO,KAAKd,MAAMH,OACvCkB,SAASC,UAAYF,KAAKb,Y,gCAG9B,WACIa,KAAKG,sBACLH,KAAKI,mBACLJ,KAAKK,e,iCAiDT,WACI,IAAIV,EAAOK,KAAKd,MAAMZ,UAAU0B,KAAKd,MAAMZ,UAAUsB,OAAS,IAC1DD,EAAK,IAAM,KAAOA,EAAK,IAAM,KAAOA,EAAK,GAAK,GAAKA,EAAK,GAAK,IAC7DK,KAAKM,e,8BAIb,WAAoB,IAAD,OACXC,EAAK,YAAOP,KAAKd,MAAMZ,WACvBqB,EAAOY,EAAMA,EAAMX,OAAS,GAChCW,EAAMC,MACND,EAAME,SAAQ,SAACtC,GACPwB,EAAK,KAAOxB,EAAI,IAAMwB,EAAK,KAAOxB,EAAI,IACtC,EAAKmC,kB,wBAKjB,WACI,IAAIX,EAAOK,KAAKd,MAAMZ,UAAU0B,KAAKd,MAAMZ,UAAUsB,OAAS,GAC1Dd,EAAOkB,KAAKd,MAAMJ,KAClBa,EAAK,KAAOb,EAAK,IAAMa,EAAK,KAAOb,EAAK,KACxCkB,KAAKR,SAAS,CACVV,KAAML,MAEVuB,KAAKU,eACLV,KAAKW,mB,0BAIb,WACI,IAAIC,EAAQ,YAAOZ,KAAKd,MAAMZ,WAC9BsC,EAASC,QAAQ,IACjBb,KAAKR,SAAS,CACVlB,UAAWsC,M,2BAInB,WACQZ,KAAKd,MAAMH,MAAQ,IACnBiB,KAAKR,SAAS,CACVT,MAAOiB,KAAKd,MAAMH,MAAQ,O,wBAKtC,WACI+B,MAAM,8BAAD,OAA+Bd,KAAKd,MAAMZ,UAAUsB,SACzDI,KAAKR,SAASX,K,oBAGlB,WACI,OACI,sBAAKR,UAAU,YAAf,UACI,cAAC0C,EAAD,CAAOzC,UAAW0B,KAAKd,MAAMZ,YAC7B,cAAC0C,EAAD,CAAM7C,IAAK6B,KAAKd,MAAMJ,c,GAnHpBmC,aCjBlBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJnB,SAASoB,eAAe,W","file":"static/js/main.21f442c8.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nexport default (props) => {\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`,\r\n    }\r\n\r\n    return <div className='snake-food' style={style}></div>\r\n}\r\n","// eslint-disable-next-line\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`,\r\n                }\r\n                return <div className='snake-dot' key={i} style={style}></div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import { Component } from 'react'\nimport Food from './Food'\nimport Snake from './Snake'\n\nconst getRandomCoordinates = () => {\n    let min = 1\n    let max = 98\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2\n    return [x, y]\n}\n\nconst initialState = {\n    food: getRandomCoordinates(),\n    speed: 200,\n    direction: 'RIGHT',\n    snakeDots: [\n        [0, 0],\n        [2, 0],\n    ],\n}\n\nclass App extends Component {\n    state = initialState\n\n    componentDidMount() {\n        setInterval(this.moveSnake, this.state.speed)\n        document.onkeydown = this.onKeyDown\n    }\n\n    componentDidUpdate() {\n        this.checkIfOutOfBorders()\n        this.checkIfCollapsed()\n        this.checkIfEat()\n    }\n\n    onKeyDown = (e) => {\n        e = e || window.event\n\n        // eslint-disable-next-line\n        switch (e.keyCode) {\n            case 38:\n                this.setState({ direction: 'UP' })\n                break\n            case 40:\n                this.setState({ direction: 'DOWN' })\n                break\n            case 37:\n                this.setState({ direction: 'LEFT' })\n                break\n            case 39:\n                this.setState({ direction: 'RIGHT' })\n                break\n        }\n    }\n\n    moveSnake = () => {\n        let dots = [...this.state.snakeDots]\n        let head = dots[dots.length - 1]\n\n        // eslint-disable-next-line\n        switch (this.state.direction) {\n            case 'RIGHT':\n                head = [head[0] + 2, head[1]]\n                break\n            case 'LEFT':\n                head = [head[0] - 2, head[1]]\n                break\n            case 'DOWN':\n                head = [head[0], head[1] + 2]\n                break\n            case 'UP':\n                head = [head[0], head[1] - 2]\n                break\n        }\n        dots.push(head)\n        dots.shift()\n        this.setState({\n            snakeDots: dots,\n        })\n    }\n\n    checkIfOutOfBorders() {\n        let head = this.state.snakeDots[this.state.snakeDots.length - 1]\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            this.onGameOver()\n        }\n    }\n\n    checkIfCollapsed() {\n        let snake = [...this.state.snakeDots]\n        let head = snake[snake.length - 1]\n        snake.pop()\n        snake.forEach((dot) => {\n            if (head[0] === dot[0] && head[1] === dot[1]) {\n                this.onGameOver()\n            }\n        })\n    }\n\n    checkIfEat() {\n        let head = this.state.snakeDots[this.state.snakeDots.length - 1]\n        let food = this.state.food\n        if (head[0] === food[0] && head[1] === food[1]) {\n            this.setState({\n                food: getRandomCoordinates(),\n            })\n            this.enlargeSnake()\n            this.increaseSpeed()\n        }\n    }\n\n    enlargeSnake() {\n        let newSnake = [...this.state.snakeDots]\n        newSnake.unshift([])\n        this.setState({\n            snakeDots: newSnake,\n        })\n    }\n\n    increaseSpeed() {\n        if (this.state.speed > 10) {\n            this.setState({\n                speed: this.state.speed - 10,\n            })\n        }\n    }\n\n    onGameOver() {\n        alert(`Game Over. Snake length is ${this.state.snakeDots.length}`)\n        this.setState(initialState)\n    }\n\n    render() {\n        return (\n            <div className='game-area'>\n                <Snake snakeDots={this.state.snakeDots} />\n                <Food dot={this.state.food} />\n                {/* <div className='snake-dot' style={{ top: 0, left: 0 }}></div>\n                <div className='snake-dot' style={{ top: 0, left: '2%' }}></div>\n                <div className='snake-dot' style={{ top: 0, left: '4%' }}></div> */}\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}